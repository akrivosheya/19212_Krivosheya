#include "pch.h"
#include "CppUnitTest.h"
#include "..\lab1\Test.cpp"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace UnitTest1
{
	TEST_CLASS(UnitTest1)
	{
	public:
		
		TEST_METHOD(ConstrDefault)
		{
			HashTable A;
			Assert::IsTrue(A.size() == 8);
		}

		TEST_METHOD(InsertAndOperAndAt)
		{
			HashTable A;
			A.insert("Bill", { 19, 83 });
			Assert::IsTrue((A["Bill"].age == 19) && (A.at("Bill").weight == 83));
		}

		TEST_METHOD(ConstrParam)
		{
			HashTable A;
			A.insert("Bill", { 19, 83 });
			A.insert("John", { 20, 70 });
			HashTable B(A);
			Assert::IsTrue((B["Bill"].age == 19) && (B["Bill"].weight == 83) && \
				(B["John"].age == 20) && (B["John"].weight == 70));
		}
		
		TEST_METHOD(ConstrParamAndChanged)
		{
			HashTable A;
			A.insert("Bill", { 19, 83 });
			HashTable B(A);
			B["Bill"].age = 20;
			Assert::IsTrue((A["Bill"].age == 19) && (B["Bill"].age == 20));
		}

		TEST_METHOD(OperatorAndContains)
		{
			HashTable A;
			A.insert("Bill", { 19, 83 });
			HashTable B;
			B = A;
			Assert::IsTrue(B.contains("Bill"));
		}

		TEST_METHOD(Clear)
		{
			HashTable A;
			A.insert("Bill", { 19, 83 });
			A.clear();
			Assert::IsTrue(!A.contains("Bill"));
		}
		
		TEST_METHOD(ContainsEmpty)
		{
			HashTable A;
			Assert::IsTrue(!A.contains("Anybody"));
		}

		TEST_METHOD(OperWithEmpty)
		{
			HashTable A;
			A["Bill"].age = 24;
			Assert::IsTrue(A.at("Bill").age == 24);
		}

		TEST_METHOD(ConstAt)
		{
			HashTable A;
			A.insert("John", { 19, 76 });
			const int w = A.at("John").weight;
			Assert::IsTrue(w == 76);
		}

		TEST_METHOD(Swap)
		{
			HashTable A, B;
			A.insert("John", { 18, 70 });
			A.insert("Bill", { 20, 75 });
			A.insert("Ann", { 18, 69 });
			B.insert("Andrew", { 20, 83 });
			B.insert("Finn", { 19, 80 });
			A.swap(B);
			Assert::IsTrue(B.contains("Bill") && B.contains("John") && B.contains("Ann") &&\
				A.contains("Andrew") && A.contains("Finn"));
		}

		TEST_METHOD(Erase)
		{
			HashTable A;
			A.insert("John", { 18, 70 });
			A.insert("Bill", { 20, 75 });
			A.insert("Ann", { 18, 69 });
			A.erase("Bill");
			Assert::IsTrue(A.contains("John") && A.contains("Ann") && !A.contains("Bill"));
		}

		TEST_METHOD(Empty)
		{
			HashTable A;
			A.insert("John", { 18, 70 });
			A.insert("Bill", { 20, 75 });
			HashTable B;
			Assert::IsTrue(B.empty() && !A.empty());
		}

		TEST_METHOD(Equal1)
		{
			HashTable A;
			A.insert("John", { 18, 70 });
			A.insert("Bill", { 20, 75 });
			HashTable B;
			B.insert("John", { 18, 70 });
			B.insert("Bill", { 20, 75 });
			Assert::IsTrue(A == B);
		}

		TEST_METHOD(Equal2)
		{
			HashTable A;
			A.insert("John", { 18, 70 });
			A.insert("Bill", { 20, 75 });
			HashTable B;
			B.insert("James", { 18, 70 });
			B.insert("Bill", { 20, 75 });
			Assert::IsTrue(!(A == B));
		}

		TEST_METHOD(Equal3)
		{
			HashTable A;
			A.insert("John", { 18, 70 });
			A.insert("Bill", { 20, 75 });
			HashTable B;
			B.insert("John", { 18, 70 });
			B.insert("Bill", { 21, 76 });
			Assert::IsTrue(A != B);
		}

		TEST_METHOD(Equal4)
		{
			HashTable A;
			A.insert("John", { 18, 70 });
			A.insert("Bill", { 20, 75 });
			HashTable B;
			B.insert("John", { 18, 70 });
			B.insert("Bill", { 20, 75 });
			Assert::IsTrue(!(A != B));
		}

		TEST_METHOD(Equal5)
		{
			HashTable A;
			A.insert("John", { 18, 70 });
			A.insert("Bill", { 20, 75 });
			HashTable B;
			Assert::IsTrue(A != B);
		}

		TEST_METHOD(Equal6)
		{
			HashTable A;
			HashTable B;
			Assert::IsTrue(A == B);
		}

		TEST_METHOD(ErrorInsert)
		{
			HashTable A;
			A.insert("John", { 18, 70 });
			Assert::IsTrue(!A.insert("John", { 20, 50 }));
		}

		TEST_METHOD(CountAfterErase)
		{
			HashTable A;
			A.insert("John", { 18, 70 });
			A.insert("Bill", { 19, 75 });
			A.erase("John");
			A.erase("Bill");
			Assert::IsTrue(A.empty());
		}

		TEST_METHOD(IncreaseTable)
		{
			HashTable A;
			A.insert("John", { 18, 70 });
			A.insert("Bill", { 19, 75 });
			A.insert("Wendy", { 19, 80 });
			A.insert("Dean", { 20, 81 });
			A.insert("Alastor", { 19, 82 });
			A.insert("Freddy", { 18, 83 });
			A.insert("Harry", { 21, 76 });
			A.insert("Alukard", { 26, 90 });
			A.insert("Aden", { 20, 81 });
			A.insert("Shrek", { 19, 78 });
			A.insert("Hayns", { 19, 80 });
			A.insert("Dendy", { 21, 76 });
			Assert::IsTrue(A.size() == 16);
		}
	};
}
