#include <iostream>
#include "factory.h"

enum class Type {
    kZergling,
    kSiegeTank,
    kBattleCruiser,
};

class Unit {
public:
    virtual void move(int x, int y) = 0;
};

class Zergling: public Unit {
public:
    void move(int x, int y) override { std::cout << "Zergling move" << std::endl; }
};

class SiegeTank : public Unit {
public:
    void move(int x, int y) override { std::cout << "SiegeTank move" << std::endl; }
};

class BattleCruiser : public Unit {
public:
    void move(int x, int y) override { std::cout << "BattleCruiser move" << std::endl; }
};

void move(Unit* u, int x, int y) {
    u->move(x, y);
}

Unit* makeUnit(const std::string& name) {
    Unit* u = nullptr;
    if (std::string("zergling") == name) {
        u = new Zergling();
    }
    else if (std::string("siegetank") == name) {
        u = new SiegeTank();
    }
    else if (std::string("buttlecruiser") == name) {
        u = new BattleCruiser();
    }
    return u;
}

int main(int arg, char* argv[]) {
    if (arg < 2) return -1;

    Factory f;
    f.addCreator(//имена функции) Возлу каждого класса создать функцию, которая возвращает объект

    Unit* u = makeUnit(argv[1]);
    move(u, 100, 500);//Dinamic binding (динамическое связывание)
    return 0;
}
