import runtime;
import ds/tree;

inds : (a : [int], m : int) -> [Pair<int, int>];
doNothing : () -> void;

main(){
	array : [int] = [1, 2, 3, 4, 5, 6, 7, 8];
	pairs : [Pair<int, int>] = inds(array, 10);
	println(pairs);
	quit(0);
}

inds(a : [int], m : int){
	l : int = length(a);
	tree : Tree<int, int> = foldi(a, makeTree(), \i, t, e -> {setTree(t, e, i)});
	pairs : ref [Pair<int, int>] = ref [];
	while1(0, m, pairs, tree, a, l);
	^pairs;
}

while1(i : int, m : int, pairs : ref [Pair<int ,int>], tree : Tree<int, int>, a : [int], l : int){
	index : Maybe<int> = lookupTree(tree, m - a[i]);
	index ?? {refArrayPush(pairs, Pair(i, index));} : {doNothing();};
	if(i + 1 < l){
		while1(i + 1, m, pairs, tree, a, l);
	}
}

doNothing(){}